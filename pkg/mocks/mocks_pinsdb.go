// Code generated by MockGen. DO NOT EDIT.
// Source: pins/database/pins.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/crossedbot/axis/pkg/pins/models"
	gomock "github.com/golang/mock/gomock"
)

// MockPins is a mock of Pins interface.
type MockPins struct {
	ctrl     *gomock.Controller
	recorder *MockPinsMockRecorder
}

// MockPinsMockRecorder is the mock recorder for MockPins.
type MockPinsMockRecorder struct {
	mock *MockPins
}

// NewMockPins creates a new mock instance.
func NewMockPins(ctrl *gomock.Controller) *MockPins {
	mock := &MockPins{ctrl: ctrl}
	mock.recorder = &MockPinsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPins) EXPECT() *MockPinsMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPins) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPinsMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPins)(nil).Delete), id)
}

// Find mocks base method.
func (m *MockPins) Find(cids, statuses []string, name string, before, after int64, match string, limit int) (models.Pins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", cids, statuses, name, before, after, match, limit)
	ret0, _ := ret[0].(models.Pins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockPinsMockRecorder) Find(cids, statuses, name, before, after, match, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPins)(nil).Find), cids, statuses, name, before, after, match, limit)
}

// Get mocks base method.
func (m *MockPins) Get(id string) (models.PinStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(models.PinStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPinsMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPins)(nil).Get), id)
}

// Patch mocks base method.
func (m *MockPins) Patch(id string, fields map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", id, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockPinsMockRecorder) Patch(id, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockPins)(nil).Patch), id, fields)
}

// Set mocks base method.
func (m *MockPins) Set(pinStatus models.PinStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", pinStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockPinsMockRecorder) Set(pinStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockPins)(nil).Set), pinStatus)
}
