// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/ipfs-cluster/ipfs-cluster/api"
	go_ipfs_api "github.com/ipfs/go-ipfs-api"
	go_ipfs_files "github.com/ipfs/go-ipfs-files"
	peer "github.com/libp2p/go-libp2p-core/peer"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockClient) Add(ctx context.Context, paths []string, params api.AddParams, out chan<- api.AddedOutput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, paths, params, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockClientMockRecorder) Add(ctx, paths, params, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockClient)(nil).Add), ctx, paths, params, out)
}

// AddMultiFile mocks base method.
func (m *MockClient) AddMultiFile(ctx context.Context, multiFileR *go_ipfs_files.MultiFileReader, params api.AddParams, out chan<- api.AddedOutput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMultiFile", ctx, multiFileR, params, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMultiFile indicates an expected call of AddMultiFile.
func (mr *MockClientMockRecorder) AddMultiFile(ctx, multiFileR, params, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMultiFile", reflect.TypeOf((*MockClient)(nil).AddMultiFile), ctx, multiFileR, params, out)
}

// Alerts mocks base method.
func (m *MockClient) Alerts(ctx context.Context) ([]api.Alert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alerts", ctx)
	ret0, _ := ret[0].([]api.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Alerts indicates an expected call of Alerts.
func (mr *MockClientMockRecorder) Alerts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alerts", reflect.TypeOf((*MockClient)(nil).Alerts), ctx)
}

// Allocation mocks base method.
func (m *MockClient) Allocation(ctx context.Context, ci api.Cid) (api.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allocation", ctx, ci)
	ret0, _ := ret[0].(api.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allocation indicates an expected call of Allocation.
func (mr *MockClientMockRecorder) Allocation(ctx, ci interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocation", reflect.TypeOf((*MockClient)(nil).Allocation), ctx, ci)
}

// Allocations mocks base method.
func (m *MockClient) Allocations(ctx context.Context, filter api.PinType, out chan<- api.Pin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allocations", ctx, filter, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// Allocations indicates an expected call of Allocations.
func (mr *MockClientMockRecorder) Allocations(ctx, filter, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocations", reflect.TypeOf((*MockClient)(nil).Allocations), ctx, filter, out)
}

// GetConnectGraph mocks base method.
func (m *MockClient) GetConnectGraph(arg0 context.Context) (api.ConnectGraph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectGraph", arg0)
	ret0, _ := ret[0].(api.ConnectGraph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectGraph indicates an expected call of GetConnectGraph.
func (mr *MockClientMockRecorder) GetConnectGraph(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectGraph", reflect.TypeOf((*MockClient)(nil).GetConnectGraph), arg0)
}

// ID mocks base method.
func (m *MockClient) ID(arg0 context.Context) (api.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID", arg0)
	ret0, _ := ret[0].(api.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ID indicates an expected call of ID.
func (mr *MockClientMockRecorder) ID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockClient)(nil).ID), arg0)
}

// IPFS mocks base method.
func (m *MockClient) IPFS(arg0 context.Context) *go_ipfs_api.Shell {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IPFS", arg0)
	ret0, _ := ret[0].(*go_ipfs_api.Shell)
	return ret0
}

// IPFS indicates an expected call of IPFS.
func (mr *MockClientMockRecorder) IPFS(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPFS", reflect.TypeOf((*MockClient)(nil).IPFS), arg0)
}

// MetricNames mocks base method.
func (m *MockClient) MetricNames(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricNames", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetricNames indicates an expected call of MetricNames.
func (mr *MockClientMockRecorder) MetricNames(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricNames", reflect.TypeOf((*MockClient)(nil).MetricNames), ctx)
}

// Metrics mocks base method.
func (m *MockClient) Metrics(ctx context.Context, name string) ([]api.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metrics", ctx, name)
	ret0, _ := ret[0].([]api.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Metrics indicates an expected call of Metrics.
func (mr *MockClientMockRecorder) Metrics(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metrics", reflect.TypeOf((*MockClient)(nil).Metrics), ctx, name)
}

// PeerAdd mocks base method.
func (m *MockClient) PeerAdd(ctx context.Context, pid peer.ID) (api.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerAdd", ctx, pid)
	ret0, _ := ret[0].(api.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PeerAdd indicates an expected call of PeerAdd.
func (mr *MockClientMockRecorder) PeerAdd(ctx, pid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerAdd", reflect.TypeOf((*MockClient)(nil).PeerAdd), ctx, pid)
}

// PeerRm mocks base method.
func (m *MockClient) PeerRm(ctx context.Context, pid peer.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerRm", ctx, pid)
	ret0, _ := ret[0].(error)
	return ret0
}

// PeerRm indicates an expected call of PeerRm.
func (mr *MockClientMockRecorder) PeerRm(ctx, pid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerRm", reflect.TypeOf((*MockClient)(nil).PeerRm), ctx, pid)
}

// Peers mocks base method.
func (m *MockClient) Peers(arg0 context.Context, arg1 chan<- api.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Peers indicates an expected call of Peers.
func (mr *MockClientMockRecorder) Peers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peers", reflect.TypeOf((*MockClient)(nil).Peers), arg0, arg1)
}

// Pin mocks base method.
func (m *MockClient) Pin(ctx context.Context, ci api.Cid, opts api.PinOptions) (api.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pin", ctx, ci, opts)
	ret0, _ := ret[0].(api.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pin indicates an expected call of Pin.
func (mr *MockClientMockRecorder) Pin(ctx, ci, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pin", reflect.TypeOf((*MockClient)(nil).Pin), ctx, ci, opts)
}

// PinPath mocks base method.
func (m *MockClient) PinPath(ctx context.Context, path string, opts api.PinOptions) (api.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PinPath", ctx, path, opts)
	ret0, _ := ret[0].(api.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PinPath indicates an expected call of PinPath.
func (mr *MockClientMockRecorder) PinPath(ctx, path, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PinPath", reflect.TypeOf((*MockClient)(nil).PinPath), ctx, path, opts)
}

// Recover mocks base method.
func (m *MockClient) Recover(ctx context.Context, ci api.Cid, local bool) (api.GlobalPinInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recover", ctx, ci, local)
	ret0, _ := ret[0].(api.GlobalPinInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recover indicates an expected call of Recover.
func (mr *MockClientMockRecorder) Recover(ctx, ci, local interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockClient)(nil).Recover), ctx, ci, local)
}

// RecoverAll mocks base method.
func (m *MockClient) RecoverAll(ctx context.Context, local bool, out chan<- api.GlobalPinInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverAll", ctx, local, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecoverAll indicates an expected call of RecoverAll.
func (mr *MockClientMockRecorder) RecoverAll(ctx, local, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverAll", reflect.TypeOf((*MockClient)(nil).RecoverAll), ctx, local, out)
}

// RepoGC mocks base method.
func (m *MockClient) RepoGC(ctx context.Context, local bool) (api.GlobalRepoGC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoGC", ctx, local)
	ret0, _ := ret[0].(api.GlobalRepoGC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepoGC indicates an expected call of RepoGC.
func (mr *MockClientMockRecorder) RepoGC(ctx, local interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoGC", reflect.TypeOf((*MockClient)(nil).RepoGC), ctx, local)
}

// Status mocks base method.
func (m *MockClient) Status(ctx context.Context, ci api.Cid, local bool) (api.GlobalPinInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ctx, ci, local)
	ret0, _ := ret[0].(api.GlobalPinInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockClientMockRecorder) Status(ctx, ci, local interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockClient)(nil).Status), ctx, ci, local)
}

// StatusAll mocks base method.
func (m *MockClient) StatusAll(ctx context.Context, filter api.TrackerStatus, local bool, out chan<- api.GlobalPinInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusAll", ctx, filter, local, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// StatusAll indicates an expected call of StatusAll.
func (mr *MockClientMockRecorder) StatusAll(ctx, filter, local, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusAll", reflect.TypeOf((*MockClient)(nil).StatusAll), ctx, filter, local, out)
}

// StatusCids mocks base method.
func (m *MockClient) StatusCids(ctx context.Context, cids []api.Cid, local bool, out chan<- api.GlobalPinInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusCids", ctx, cids, local, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// StatusCids indicates an expected call of StatusCids.
func (mr *MockClientMockRecorder) StatusCids(ctx, cids, local, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusCids", reflect.TypeOf((*MockClient)(nil).StatusCids), ctx, cids, local, out)
}

// Unpin mocks base method.
func (m *MockClient) Unpin(ctx context.Context, ci api.Cid) (api.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unpin", ctx, ci)
	ret0, _ := ret[0].(api.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unpin indicates an expected call of Unpin.
func (mr *MockClientMockRecorder) Unpin(ctx, ci interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unpin", reflect.TypeOf((*MockClient)(nil).Unpin), ctx, ci)
}

// UnpinPath mocks base method.
func (m *MockClient) UnpinPath(ctx context.Context, path string) (api.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpinPath", ctx, path)
	ret0, _ := ret[0].(api.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnpinPath indicates an expected call of UnpinPath.
func (mr *MockClientMockRecorder) UnpinPath(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpinPath", reflect.TypeOf((*MockClient)(nil).UnpinPath), ctx, path)
}

// Version mocks base method.
func (m *MockClient) Version(arg0 context.Context) (api.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", arg0)
	ret0, _ := ret[0].(api.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockClientMockRecorder) Version(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockClient)(nil).Version), arg0)
}
