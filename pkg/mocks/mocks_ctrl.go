// Code generated by MockGen. DO NOT EDIT.
// Source: pins/controller/controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/crossedbot/axis/pkg/pins/models"
	gomock "github.com/golang/mock/gomock"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// CreatePin mocks base method.
func (m *MockController) CreatePin(uid string, pin models.Pin) (models.PinStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePin", uid, pin)
	ret0, _ := ret[0].(models.PinStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePin indicates an expected call of CreatePin.
func (mr *MockControllerMockRecorder) CreatePin(uid, pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePin", reflect.TypeOf((*MockController)(nil).CreatePin), uid, pin)
}

// FindPins mocks base method.
func (m *MockController) FindPins(uid string, cids []string, name, before, after string, match models.TextMatch, statuses []models.Status, limit int) (models.Pins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPins", uid, cids, name, before, after, match, statuses, limit)
	ret0, _ := ret[0].(models.Pins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPins indicates an expected call of FindPins.
func (mr *MockControllerMockRecorder) FindPins(uid, cids, name, before, after, match, statuses, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPins", reflect.TypeOf((*MockController)(nil).FindPins), uid, cids, name, before, after, match, statuses, limit)
}

// GetPin mocks base method.
func (m *MockController) GetPin(uid, id string) (models.PinStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPin", uid, id)
	ret0, _ := ret[0].(models.PinStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPin indicates an expected call of GetPin.
func (mr *MockControllerMockRecorder) GetPin(uid, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPin", reflect.TypeOf((*MockController)(nil).GetPin), uid, id)
}

// PatchPin mocks base method.
func (m *MockController) PatchPin(uid, id string, data models.Pin) (models.PinStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchPin", uid, id, data)
	ret0, _ := ret[0].(models.PinStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchPin indicates an expected call of PatchPin.
func (mr *MockControllerMockRecorder) PatchPin(uid, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPin", reflect.TypeOf((*MockController)(nil).PatchPin), uid, id, data)
}

// RemovePin mocks base method.
func (m *MockController) RemovePin(uid, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePin", uid, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePin indicates an expected call of RemovePin.
func (mr *MockControllerMockRecorder) RemovePin(uid, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePin", reflect.TypeOf((*MockController)(nil).RemovePin), uid, id)
}

// UpdatePin mocks base method.
func (m *MockController) UpdatePin(uid, id string, data models.Pin) (models.PinStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePin", uid, id, data)
	ret0, _ := ret[0].(models.PinStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePin indicates an expected call of UpdatePin.
func (mr *MockControllerMockRecorder) UpdatePin(uid, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePin", reflect.TypeOf((*MockController)(nil).UpdatePin), uid, id, data)
}
