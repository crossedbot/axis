// Code generated by MockGen. DO NOT EDIT.
// Source: pinwatcher/statustracker.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	api "github.com/ipfs/ipfs-cluster/api"
)

// MockStatusTracker is a mock of StatusTracker interface.
type MockStatusTracker struct {
	ctrl     *gomock.Controller
	recorder *MockStatusTrackerMockRecorder
}

// MockStatusTrackerMockRecorder is the mock recorder for MockStatusTracker.
type MockStatusTrackerMockRecorder struct {
	mock *MockStatusTracker
}

// NewMockStatusTracker creates a new mock instance.
func NewMockStatusTracker(ctrl *gomock.Controller) *MockStatusTracker {
	mock := &MockStatusTracker{ctrl: ctrl}
	mock.recorder = &MockStatusTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusTracker) EXPECT() *MockStatusTrackerMockRecorder {
	return m.recorder
}

// CheckStatus mocks base method.
func (m *MockStatusTracker) CheckStatus(target api.TrackerStatus) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStatus", target)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckStatus indicates an expected call of CheckStatus.
func (mr *MockStatusTrackerMockRecorder) CheckStatus(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStatus", reflect.TypeOf((*MockStatusTracker)(nil).CheckStatus), target)
}

// GetId mocks base method.
func (m *MockStatusTracker) GetId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetId indicates an expected call of GetId.
func (mr *MockStatusTrackerMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockStatusTracker)(nil).GetId))
}

// Poll mocks base method.
func (m *MockStatusTracker) Poll(target api.TrackerStatus, checkFreq time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Poll", target, checkFreq)
}

// Poll indicates an expected call of Poll.
func (mr *MockStatusTrackerMockRecorder) Poll(target, checkFreq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockStatusTracker)(nil).Poll), target, checkFreq)
}

// Stop mocks base method.
func (m *MockStatusTracker) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockStatusTrackerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStatusTracker)(nil).Stop))
}
