// Code generated by MockGen. DO NOT EDIT.
// Source: pinner/pinner.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/crossedbot/axis/pkg/pins/models"
	gomock "github.com/golang/mock/gomock"
	api "github.com/ipfs/ipfs-cluster/api"
)

// MockPinner is a mock of Pinner interface.
type MockPinner struct {
	ctrl     *gomock.Controller
	recorder *MockPinnerMockRecorder
}

// MockPinnerMockRecorder is the mock recorder for MockPinner.
type MockPinnerMockRecorder struct {
	mock *MockPinner
}

// NewMockPinner creates a new mock instance.
func NewMockPinner(ctrl *gomock.Controller) *MockPinner {
	mock := &MockPinner{ctrl: ctrl}
	mock.recorder = &MockPinnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPinner) EXPECT() *MockPinnerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPinner) Add(pin models.Pin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", pin)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockPinnerMockRecorder) Add(pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPinner)(nil).Add), pin)
}

// Delegates mocks base method.
func (m *MockPinner) Delegates() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delegates")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delegates indicates an expected call of Delegates.
func (mr *MockPinnerMockRecorder) Delegates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delegates", reflect.TypeOf((*MockPinner)(nil).Delegates))
}

// Remove mocks base method.
func (m *MockPinner) Remove(cid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", cid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockPinnerMockRecorder) Remove(cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPinner)(nil).Remove), cid)
}

// SetPinMode mocks base method.
func (m *MockPinner) SetPinMode(mode api.PinMode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPinMode", mode)
}

// SetPinMode indicates an expected call of SetPinMode.
func (mr *MockPinnerMockRecorder) SetPinMode(mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPinMode", reflect.TypeOf((*MockPinner)(nil).SetPinMode), mode)
}

// SetReplicationFactor mocks base method.
func (m *MockPinner) SetReplicationFactor(min, max int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReplicationFactor", min, max)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReplicationFactor indicates an expected call of SetReplicationFactor.
func (mr *MockPinnerMockRecorder) SetReplicationFactor(min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReplicationFactor", reflect.TypeOf((*MockPinner)(nil).SetReplicationFactor), min, max)
}
